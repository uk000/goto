// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: grpc.proto

package pb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *Input) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type StreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkSize  int32  `protobuf:"varint,1,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	ChunkCount int32  `protobuf:"varint,2,opt,name=chunkCount,proto3" json:"chunkCount,omitempty"`
	Interval   string `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Payload    string `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *StreamConfig) Reset() {
	*x = StreamConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfig) ProtoMessage() {}

func (x *StreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfig.ProtoReflect.Descriptor instead.
func (*StreamConfig) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *StreamConfig) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *StreamConfig) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *StreamConfig) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *StreamConfig) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload  string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	At       string `protobuf:"bytes,2,opt,name=at,proto3" json:"at,omitempty"`
	GotoHost string `protobuf:"bytes,3,opt,name=gotoHost,proto3" json:"gotoHost,omitempty"`
	GotoPort int32  `protobuf:"varint,4,opt,name=gotoPort,proto3" json:"gotoPort,omitempty"`
	ViaGoto  string `protobuf:"bytes,5,opt,name=viaGoto,proto3" json:"viaGoto,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *Output) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Output) GetAt() string {
	if x != nil {
		return x.At
	}
	return ""
}

func (x *Output) GetGotoHost() string {
	if x != nil {
		return x.GotoHost
	}
	return ""
}

func (x *Output) GetGotoPort() int32 {
	if x != nil {
		return x.GotoPort
	}
	return 0
}

func (x *Output) GetViaGoto() string {
	if x != nil {
		return x.ViaGoto
	}
	return ""
}

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x74,
	0x6f, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x74,
	0x6f, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x61, 0x47, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x61, 0x47, 0x6f, 0x74, 0x6f, 0x32, 0x77, 0x0a, 0x04, 0x47,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x06, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x07, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x27,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x75, 0x74, 0x12, 0x0d, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x07, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x0d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x07, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_proto_rawDescOnce sync.Once
	file_grpc_proto_rawDescData = file_grpc_proto_rawDesc
)

func file_grpc_proto_rawDescGZIP() []byte {
	file_grpc_proto_rawDescOnce.Do(func() {
		file_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_rawDescData)
	})
	return file_grpc_proto_rawDescData
}

var file_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_grpc_proto_goTypes = []interface{}{
	(*Input)(nil),        // 0: Input
	(*StreamConfig)(nil), // 1: StreamConfig
	(*Output)(nil),       // 2: Output
}
var file_grpc_proto_depIdxs = []int32{
	0, // 0: Goto.echo:input_type -> Input
	1, // 1: Goto.streamOut:input_type -> StreamConfig
	1, // 2: Goto.streamInOut:input_type -> StreamConfig
	2, // 3: Goto.echo:output_type -> Output
	2, // 4: Goto.streamOut:output_type -> Output
	2, // 5: Goto.streamInOut:output_type -> Output
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
		MessageInfos:      file_grpc_proto_msgTypes,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GotoClient is the client API for Goto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GotoClient interface {
	Echo(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	StreamOut(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (Goto_StreamOutClient, error)
	StreamInOut(ctx context.Context, opts ...grpc.CallOption) (Goto_StreamInOutClient, error)
}

type gotoClient struct {
	cc grpc.ClientConnInterface
}

func NewGotoClient(cc grpc.ClientConnInterface) GotoClient {
	return &gotoClient{cc}
}

func (c *gotoClient) Echo(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/Goto/echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gotoClient) StreamOut(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (Goto_StreamOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Goto_serviceDesc.Streams[0], "/Goto/streamOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &gotoStreamOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Goto_StreamOutClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type gotoStreamOutClient struct {
	grpc.ClientStream
}

func (x *gotoStreamOutClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gotoClient) StreamInOut(ctx context.Context, opts ...grpc.CallOption) (Goto_StreamInOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Goto_serviceDesc.Streams[1], "/Goto/streamInOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &gotoStreamInOutClient{stream}
	return x, nil
}

type Goto_StreamInOutClient interface {
	Send(*StreamConfig) error
	Recv() (*Output, error)
	grpc.ClientStream
}

type gotoStreamInOutClient struct {
	grpc.ClientStream
}

func (x *gotoStreamInOutClient) Send(m *StreamConfig) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gotoStreamInOutClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GotoServer is the server API for Goto service.
type GotoServer interface {
	Echo(context.Context, *Input) (*Output, error)
	StreamOut(*StreamConfig, Goto_StreamOutServer) error
	StreamInOut(Goto_StreamInOutServer) error
}

// UnimplementedGotoServer can be embedded to have forward compatible implementations.
type UnimplementedGotoServer struct {
}

func (*UnimplementedGotoServer) Echo(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedGotoServer) StreamOut(*StreamConfig, Goto_StreamOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOut not implemented")
}
func (*UnimplementedGotoServer) StreamInOut(Goto_StreamInOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInOut not implemented")
}

func RegisterGotoServer(s *grpc.Server, srv GotoServer) {
	s.RegisterService(&_Goto_serviceDesc, srv)
}

func _Goto_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GotoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goto/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GotoServer).Echo(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goto_StreamOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GotoServer).StreamOut(m, &gotoStreamOutServer{stream})
}

type Goto_StreamOutServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type gotoStreamOutServer struct {
	grpc.ServerStream
}

func (x *gotoStreamOutServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func _Goto_StreamInOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GotoServer).StreamInOut(&gotoStreamInOutServer{stream})
}

type Goto_StreamInOutServer interface {
	Send(*Output) error
	Recv() (*StreamConfig, error)
	grpc.ServerStream
}

type gotoStreamInOutServer struct {
	grpc.ServerStream
}

func (x *gotoStreamInOutServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gotoStreamInOutServer) Recv() (*StreamConfig, error) {
	m := new(StreamConfig)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Goto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Goto",
	HandlerType: (*GotoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "echo",
			Handler:    _Goto_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamOut",
			Handler:       _Goto_StreamOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamInOut",
			Handler:       _Goto_StreamInOut_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
